syntax = "proto2";
package mcs_proto;


message HeartbeatPing {

	optional int32 stream_id = 1;
	optional int32 last_stream_id_received = 2;
	optional int64 status = 3;

}


message HeartbeatAck {

	optional int32 stream_id = 1;
	optional int32 last_stream_id_received = 2;
	optional int64 status = 3;
	
}


message ErrorInfo {

	required int32 code = 1;
	optional string message = 2;
	optional string type = 3;
	optional .mcs_proto.Extension extension = 4;

}



message Setting {

	required string name = 1;
	required string value = 2;
	

}

message HeartbeatStat {

	required string ip = 1;
	required bool timeout = 2;
	required int32 interval_ms = 3;

}

message HeartbeatConfig {

	optional bool upload_stat = 1;
	optional string ip = 2;
	optional int32 interval_ms = 3;
	

}


message ClientEvent {

	optional .mcs_proto.ClientEvent.Type type = 1;
	optional uint32 number_discarded_events = 100;
	optional int32 network_type = 200;
	optional uint64 time_connection_started_ms = 202;
	optional uint64 time_connection_ended_ms = 203;
	optional int32 error_code = 204;
	optional uint64 time_connection_established_ms = 300;

	enum Type {
	
		UNKNOWN = 0;
		DISCARDED_EVENTS = 1;
		FAILED_CONNECTION = 2;
		SUCCESSFUL_CONNECTION = 3;
	}

}



message LoginRequest {

	required string id = 1;
	required string domain = 2;
	required string user = 3;
	required string resource = 4;
	required string auth_token = 5;
	optional string device_id = 6;
	optional int64 last_rmq_id = 7;
	repeated .mcs_proto.Setting setting = 8;
	repeated string received_persistent_id = 10;
	optional bool adaptive_heartbeat = 12;
	optional .mcs_proto.HeartbeatStat heartbeat_stat = 13;
	optional bool use_rmq2 = 14;
	optional int64 account_id = 15;
	optional .mcs_proto.LoginRequest.AuthService auth_service = 16;
	optional int32 network_type = 17;
	optional int64 status = 18;
	repeated .mcs_proto.ClientEvent client_event = 22;
	
	enum AuthService {
	
		ANDROID_ID = 2;
	
	}

}



message LoginResponse {

	required string id = 1;
	optional string jid = 2;
	optional .mcs_proto.ErrorInfo error = 3;
	repeated .mcs_proto.Setting setting = 4;
	optional int32 stream_id = 5;
	optional int32 last_stream_id_received = 6;
	optional .mcs_proto.HeartbeatConfig heartbeat_config = 7;
	optional int64 server_timestamp = 8;

}


message StreamErrorStanza {

	required string type = 1;
	optional string text = 2;


}

message Close {

}


message Extension {

	required int32 id = 1;
	required bytes data = 2;

}


message IqStanza {

	optional int64 rmq_id = 1;
	required .mcs_proto.IqStanza.IqType type = 2;
	required string id = 3;
	optional string from = 4;
	optional string to = 5;
	optional .mcs_proto.ErrorInfo error = 6;
	optional .mcs_proto.Extension extension = 7;
	optional string persistent_id = 8;
	optional int32 stream_id = 9;
	optional int32 last_stream_id_received = 10;
	optional int64 account_id = 11;
	optional int64 status = 12;
	
	enum IqType {
	
		GET = 0;
		SET = 1;
		RESULT = 2;
		IQ_ERROR = 3;
	}
	
	
}



message AppData {

	required string key = 1;
	required string value = 2;

}


message DataMessageStanza {

	optional string id = 2;
	required string from = 3;
	optional string to = 4;
	required string category = 5;
	optional string token = 6;
	repeated .mcs_proto.AppData app_data = 7;
	optional bool from_trusted_server = 8;
	optional string persistent_id = 9;
	optional int32 stream_id = 10;
	optional int32 last_stream_id_received = 11;
	optional string reg_id = 13;
	optional int64 device_user_id = 16;
	optional int32 ttl = 17;
	optional int64 sent = 18;
	optional int32 queued = 19;
	optional int64 status = 20;
	optional bytes raw_data = 21;
	optional bool immediate_ack = 24;
	

}



message StreamAck {

}

message SelectiveAck {

	repeated string id = 1;

}


option optimize_for = LITE_RUNTIME; 



























